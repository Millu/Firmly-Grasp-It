-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2A50;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0B9F;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping
           00A : 820E;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 81F0;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display batt voltage on LCD
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 4BAE;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 4BAB;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 4BAB;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 1395;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 5395;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 4BAC;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 0B9F;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 825D;  -- 	CALL   StartLog
           022 : 2823;  -- 	JUMP   Main
           023 : 98C3;  -- 	OUT    	RESETPOS    ; reset odometer in case wheels moved after programming
           024 : 8246;  -- 	CALL   	UARTClear   ; empty the UART receive FIFO of any old data
           025 : BB7D;  -- 	LOADI	InputArr
           026 : 136F;  -- 	STORE	PointerX
           027 : 6801;  -- 	ADDI 	1
           028 : 1370;  -- 	STORE 	PointerY
           029 : 6801;  -- 	ADDI 	1
           02A : 1371;  -- 	STORE 	PointerOrd
           02B : 816B;  -- 	CALL 	CurrPosX
           02C : 805A;  -- 	CALL 	MoveNextSegmentX
           02D : 803C;  -- 	CALL	LoopYYXX
           02E : 80E8;  -- 	CALL 	SlowTurn90Second
           02F : 8176;  -- 	CALL 	CurrPosY
           030 : 807C;  -- 	CALL 	MoveNextSegmentY
           031 : 8055;  -- 	CALL 	ToggleLED
           032 : 8181;  -- 	CALL 	CurrOrder
           033 : 8176;  -- 	CALL 	CurrPosY
           034 : 807C;  -- 	CALL 	MoveNextSegmentY
           035 : 80E8;  -- 	CALL 	SlowTurn90Second
           036 : 816B;  -- 	CALL 	CurrPosX
           037 : 805A;  -- 	CALL 	MoveNextSegmentX
           038 : 8055;  -- 	CALL 	ToggleLED
           039 : 8181;  -- 	CALL 	CurrOrder
           03A : 804E;  -- 	CALL 	ResetPreviousVariables
           03B : 81DB;  -- 	CALL	DIE
           03C : 80E8;  -- 	CALL 	SlowTurn90Second
           03D : 8176;  -- 	CALL 	CurrPosY
           03E : 807C;  -- 	CALL 	MoveNextSegmentY
           03F : 8055;  -- 	CALL 	ToggleLED
           040 : 8181;  -- 	CALL 	CurrOrder
           041 : 8176;  -- 	CALL 	CurrPosY
           042 : 807C;  -- 	CALL 	MoveNextSegmentY
           043 : 80E8;  -- 	CALL 	SlowTurn90Second
           044 : 816B;  -- 	CALL 	CurrPosX
           045 : 805A;  -- 	CALL 	MoveNextSegmentX
           046 : 8055;  -- 	CALL 	ToggleLED
           047 : 8181;  -- 	CALL 	CurrOrder
           048 : 816B;  -- 	CALL 	CurrPosX
           049 : 805A;  -- 	CALL 	MoveNextSegmentX
           04A : 0B79;  -- 	LOAD 	EndCount
           04B : 6FEB;  -- 	ADDI 	-21
           04C : 303C;  -- 	JNEG 	LoopYYXX
           04D : 8800;  -- 	RETURN
           04E : 8265;  -- 	CALL 	StopLog
           04F : 0B9F;  -- 	LOAD	Zero
           050 : 1372;  -- 	STORE	PrevX
           051 : 1373;  -- 	STORE	PrevY
           052 : 1377;  -- 	STORE	PrevDist
           053 : 1379;  -- 	STORE	EndCount
           054 : 8800;  -- 	RETURN
           055 : 0BA3;  -- 	LOAD	Four
           056 : 980A;  -- 	OUT 	BEEP
           057 : 81E4;  -- 	CALL	Wait1
           058 : 980A;  -- 	OUT 	BEEP
           059 : 8800;  -- 	RETURN
           05A : 0B74;  -- 	LOAD   	CurX
           05B : 2372;  -- 	SUB   	PrevX
           05C : 1376;  -- 	STORE  	MyDist
           05D : 90C2;  -- 	IN     	THETA
           05E : 23BB;  -- 	SUB    	Deg270
           05F : 3864;  -- 	JPOS   	FACE0
           060 : 90C2;  -- 	IN		THETA
           061 : 23B9;  -- 	SUB 	Deg90
           062 : 3867;  -- 	JPOS 	FACE180
           063 : 2864;  -- 	JUMP   	FACE0
           064 : 0B76;  -- 	LOAD   	MyDist
           065 : 386A;  -- 	JPOS   	MoveForX
           066 : 2873;  -- 	JUMP   	MoveBackX
           067 : 0B76;  -- 	LOAD   	MyDist
           068 : 306A;  -- 	JNEG   	MoveForX
           069 : 2873;  -- 	JUMP   	MoveBackX
           06A : 0B76;  -- 	LOAD	MyDist
           06B : 8333;  -- 	CALL	Abs
           06C : 1376;  -- 	STORE	MyDist
           06D : 9088;  -- 	IN 		RPOS
           06E : 1377;  -- 	STORE 	PrevDist
           06F : 0B74;  -- 	LOAD	CurX
           070 : 1372;  -- 	STORE	PrevX
           071 : 80AE;  -- 	CALL  	PhysicallyMoveFor
           072 : 8800;  -- 	Return
           073 : 0B76;  -- 	LOAD	MyDist
           074 : 8333;  -- 	CALL	Abs
           075 : 1376;  -- 	STORE	MyDist
           076 : 9088;  -- 	IN 		RPOS
           077 : 1377;  -- 	STORE 	PrevDist
           078 : 0B74;  -- 	LOAD	CurX
           079 : 1372;  -- 	STORE	PrevX
           07A : 809B;  -- 	CALL  	PhysicallyMoveBack
           07B : 8800;  -- 	Return
           07C : 0B75;  -- 	LOAD  	CurY
           07D : 2373;  -- 	SUB  	PrevY
           07E : 1376;  -- 	STORE  	MyDist
           07F : 90C2;  -- 	IN     	THETA
           080 : 23BA;  -- 	SUB    	Deg180
           081 : 3886;  -- 	JPOS   	FACE270
           082 : 2883;  -- 	JUMP   	FACE90
           083 : 0B76;  -- 	LOAD   	MyDist
           084 : 3889;  -- 	JPOS   	MoveForY
           085 : 2892;  -- 	JUMP   	MoveBackY
           086 : 0B76;  -- 	LOAD   	MyDist
           087 : 3089;  -- 	JNEG   	MoveForY
           088 : 2892;  -- 	JUMP   	MoveBackY
           089 : 0B76;  -- 	LOAD	MyDist
           08A : 8333;  -- 	CALL	Abs
           08B : 1376;  -- 	STORE	MyDist
           08C : 9088;  -- 	IN 		RPOS
           08D : 1377;  -- 	STORE 	PrevDist
           08E : 0B75;  -- 	LOAD	CurY
           08F : 1373;  -- 	STORE	PrevY
           090 : 80AE;  -- 	CALL  	PhysicallyMoveFor
           091 : 8800;  -- 	Return
           092 : 0B76;  -- 	LOAD	MyDist
           093 : 8333;  -- 	CALL	Abs
           094 : 1376;  -- 	STORE	MyDist
           095 : 9088;  -- 	IN 		RPOS
           096 : 1377;  -- 	STORE 	PrevDist
           097 : 0B75;  -- 	LOAD	CurY
           098 : 1373;  -- 	STORE	PrevY
           099 : 809B;  -- 	CALL  	PhysicallyMoveBack
           09A : 8800;  -- 	Return
           09B : 0BC0;  -- 	LOAD 	RMid
           09C : 988B;  -- 	OUT 	RVELCMD
           09D : 9883;  -- 	OUT 	LVELCMD
           09E : 9088;  -- 	IN 		RPOS
           09F : 2377;  -- 	SUB		PrevDist ; 0x04D1
           0A0 : 1B76;  -- 	ADD 	MyDist ; 0x0122
           0A1 : 23B6;  -- 	SUB 	HalfFoot
           0A2 : 389B;  -- 	JPOS	MoveBackMid
           0A3 : 0BBE;  -- 	LOAD 	RSlow
           0A4 : 988B;  -- 	OUT 	RVELCMD
           0A5 : 9883;  -- 	OUT 	LVELCMD
           0A6 : 9088;  -- 	IN 		RPOS
           0A7 : 2377;  -- 	SUB		PrevDist
           0A8 : 2376;  -- 	SUB 	MyDist
           0A9 : 38A3;  -- 	JPOS 	MoveBackSlow
           0AA : 0B9F;  -- 	LOAD 	Zero
           0AB : 988B;  -- 	OUT 	RVELCMD
           0AC : 9883;  -- 	OUT 	LVELCMD
           0AD : 8800;  -- 	RETURN
           0AE : 0BBF;  -- 	LOAD 	FMid
           0AF : 988B;  -- 	OUT 	RVELCMD
           0B0 : 9883;  -- 	OUT 	LVELCMD
           0B1 : 9088;  -- 	IN 		RPOS
           0B2 : 2377;  -- 	SUB		PrevDist
           0B3 : 2376;  -- 	SUB 	MyDist
           0B4 : 1BB6;  -- 	ADD 	HalfFoot
           0B5 : 30AE;  -- 	JNEG	MoveForMid
           0B6 : 0BBD;  -- 	LOAD 	FSlow
           0B7 : 988B;  -- 	OUT 	RVELCMD
           0B8 : 9883;  -- 	OUT 	LVELCMD
           0B9 : 9088;  -- 	IN 		RPOS
           0BA : 2377;  -- 	SUB		PrevDist
           0BB : 2376;  -- 	SUB 	MyDist
           0BC : 30B6;  -- 	JNEG 	MoveForSlow
           0BD : 0B9F;  -- 	LOAD 	Zero
           0BE : 988B;  -- 	OUT 	RVELCMD
           0BF : 9883;  -- 	OUT 	LVELCMD
           0C0 : 8800;  -- 	RETURN
           0C1 : B800;  -- 	LOADI	0
           0C2 : 9802;  -- 	OUT		TIMER
           0C3 : 9002;  -- 	IN 		TIMER
           0C4 : 6FFB;  -- 	ADDI 	-5
           0C5 : 30C3;  -- 	JNEG	Check2Sec
           0C6 : 8800;  -- 	RETURN
           0C7 : 0B78;  -- 	LOAD	PrevAngle
           0C8 : 6EF2;  -- 	ADDI	-270
           0C9 : 40CD;  -- 	JZERO	SetAngleZero
           0CA : 685A;  -- 	ADDI	90
           0CB : 1378;  -- 	STORE	PrevAngle
           0CC : 28CE;  -- 	JUMP	PhysicallyTurn
           0CD : 1378;  -- 	STORE	PrevAngle
           0CE : 0BBE;  -- 	LOAD	RSlow
           0CF : 9883;  -- 	OUT 	LVELCMD
           0D0 : 0BBD;  -- 	LOAD	FSlow
           0D1 : 988B;  -- 	OUT		RVELCMD
           0D2 : 90C2;  -- 	IN 		THETA
           0D3 : 9806;  -- 	OUT		LCD
           0D4 : 2378;  -- 	SUB		PrevAngle
           0D5 : 30C7;  -- 	JNEG	SlowTurn90
           0D6 : 6EFC;  -- 	ADDI	-260
           0D7 : 38CE;  -- 	JPOS	PhysicallyTurn
           0D8 : 0B9F;  -- 	LOAD	Zero
           0D9 : 9883;  -- 	OUT 	LVELCMD
           0DA : 988B;  -- 	OUT		RVELCMD
           0DB : 8800;  -- 	RETURN
           0DC : 0BC2;  -- 	LOAD	RFast
           0DD : 9883;  -- 	OUT 	LVELCMD
           0DE : 0BC1;  -- 	LOAD	FFast
           0DF : 988B;  -- 	OUT		RVELCMD
           0E0 : 90C2;  -- 	IN 		THETA
           0E1 : 9806;  -- 	OUT		LCD
           0E2 : 6FA6;  -- 	ADDI	-90
           0E3 : 30DC;  -- 	JNEG	FastTurn90
           0E4 : 0B9F;  -- 	LOAD	Zero
           0E5 : 9883;  -- 	OUT 	LVELCMD
           0E6 : 988B;  -- 	OUT		RVELCMD
           0E7 : 8800;  -- 	RETURN
           0E8 : 80C1;  -- 	CALL 	Wait2Sec
           0E9 : 90C2;  -- 	IN 		THETA
           0EA : 1378;  -- 	STORE 	PrevAngle
           0EB : 6FD3;  -- 	ADDI 	-45
           0EC : 30F4;  -- 	JNEG 	FACING0
           0ED : 6FA6;  -- 	ADDI 	-90
           0EE : 3110;  -- 	JNEG 	FACING90
           0EF : 6FA6;  -- 	ADDI 	-90
           0F0 : 312C;  -- 	JNEG 	FACING180
           0F1 : 6FA6;  -- 	ADDI 	-90
           0F2 : 3148;  -- 	JNEG 	FACING270
           0F3 : 28F4;  -- 	JUMP 	FACING0
           0F4 : 0BBE;  -- 	LOAD 	RSlow
           0F5 : 9883;  -- 	OUT 	LVELCMD
           0F6 : 0BBD;  -- 	LOAD 	FSlow
           0F7 : 988B;  -- 	OUT 	RVELCMD
           0F8 : 90C2;  -- 	IN 		THETA
           0F9 : 6FAB;  -- 	ADDI 	-85
           0FA : 4166;  -- 	JZERO 	ENDSPIN
           0FB : 6FFF;  -- 	ADDI 	-1
           0FC : 4166;  -- 	JZERO 	ENDSPIN
           0FD : 6FFF;  -- 	ADDI 	-1
           0FE : 4166;  -- 	JZERO 	ENDSPIN
           0FF : 6FFF;  -- 	ADDI 	-1
           100 : 4166;  -- 	JZERO 	ENDSPIN
           101 : 6FFF;  -- 	ADDI 	-1
           102 : 4166;  -- 	JZERO 	ENDSPIN
           103 : 6FFF;  -- 	ADDI 	-1
           104 : 4166;  -- 	JZERO 	ENDSPIN
           105 : 6FFF;  -- 	ADDI 	-1
           106 : 4166;  -- 	JZERO 	ENDSPIN
           107 : 6FFF;  -- 	ADDI 	-1
           108 : 4166;  -- 	JZERO 	ENDSPIN
           109 : 6FFF;  -- 	ADDI 	-1
           10A : 4166;  -- 	JZERO 	ENDSPIN
           10B : 6FFF;  -- 	ADDI 	-1
           10C : 4166;  -- 	JZERO 	ENDSPIN
           10D : 6FFF;  -- 	ADDI 	-1
           10E : 4166;  -- 	JZERO 	ENDSPIN
           10F : 28F4;  -- 	JUMP FACING0
           110 : 0BBE;  -- 	LOAD 	RSlow
           111 : 9883;  -- 	OUT 	LVELCMD
           112 : 0BBD;  -- 	LOAD 	FSlow
           113 : 988B;  -- 	OUT 	RVELCMD
           114 : 90C2;  -- 	IN 		THETA
           115 : 6F51;  -- 	ADDI 	-175
           116 : 4166;  -- 	JZERO 	ENDSPIN
           117 : 6FFF;  -- 	ADDI 	-1
           118 : 4166;  -- 	JZERO 	ENDSPIN
           119 : 6FFF;  -- 	ADDI 	-1
           11A : 4166;  -- 	JZERO 	ENDSPIN
           11B : 6FFF;  -- 	ADDI 	-1
           11C : 4166;  -- 	JZERO 	ENDSPIN
           11D : 6FFF;  -- 	ADDI 	-1
           11E : 4166;  -- 	JZERO 	ENDSPIN
           11F : 6FFF;  -- 	ADDI 	-1
           120 : 4166;  -- 	JZERO 	ENDSPIN
           121 : 6FFF;  -- 	ADDI 	-1
           122 : 4166;  -- 	JZERO 	ENDSPIN
           123 : 6FFF;  -- 	ADDI 	-1
           124 : 4166;  -- 	JZERO 	ENDSPIN
           125 : 6FFF;  -- 	ADDI 	-1
           126 : 4166;  -- 	JZERO 	ENDSPIN
           127 : 6FFF;  -- 	ADDI 	-1
           128 : 4166;  -- 	JZERO 	ENDSPIN
           129 : 6FFF;  -- 	ADDI 	-1
           12A : 4166;  -- 	JZERO 	ENDSPIN
           12B : 2910;  -- 	JUMP FACING90
           12C : 0BBE;  -- 	LOAD 	RSlow
           12D : 9883;  -- 	OUT 	LVELCMD
           12E : 0BBD;  -- 	LOAD 	FSlow
           12F : 988B;  -- 	OUT 	RVELCMD
           130 : 90C2;  -- 	IN 		THETA
           131 : 6EF7;  -- 	ADDI 	-265
           132 : 4166;  -- 	JZERO 	ENDSPIN
           133 : 6FFF;  -- 	ADDI 	-1
           134 : 4166;  -- 	JZERO 	ENDSPIN
           135 : 6FFF;  -- 	ADDI 	-1
           136 : 4166;  -- 	JZERO 	ENDSPIN
           137 : 6FFF;  -- 	ADDI 	-1
           138 : 4166;  -- 	JZERO 	ENDSPIN
           139 : 6FFF;  -- 	ADDI 	-1
           13A : 4166;  -- 	JZERO 	ENDSPIN
           13B : 6FFF;  -- 	ADDI 	-1
           13C : 4166;  -- 	JZERO 	ENDSPIN
           13D : 6FFF;  -- 	ADDI 	-1
           13E : 4166;  -- 	JZERO 	ENDSPIN
           13F : 6FFF;  -- 	ADDI 	-1
           140 : 4166;  -- 	JZERO 	ENDSPIN
           141 : 6FFF;  -- 	ADDI 	-1
           142 : 4166;  -- 	JZERO 	ENDSPIN
           143 : 6FFF;  -- 	ADDI 	-1
           144 : 4166;  -- 	JZERO 	ENDSPIN
           145 : 6FFF;  -- 	ADDI 	-1
           146 : 4166;  -- 	JZERO 	ENDSPIN
           147 : 292C;  -- 	JUMP FACING180
           148 : 0BBE;  -- 	LOAD 	RSlow
           149 : 9883;  -- 	OUT 	LVELCMD
           14A : 0BBD;  -- 	LOAD 	FSlow
           14B : 988B;  -- 	OUT 	RVELCMD
           14C : 90C2;  -- 	IN 		THETA
           14D : 6E9D;  -- 	ADDI 	-355
           14E : 4166;  -- 	JZERO 	ENDSPIN
           14F : 6FFF;  -- 	ADDI 	-1
           150 : 4166;  -- 	JZERO 	ENDSPIN
           151 : 6FFF;  -- 	ADDI 	-1
           152 : 4166;  -- 	JZERO 	ENDSPIN
           153 : 6FFF;  -- 	ADDI 	-1
           154 : 4166;  -- 	JZERO 	ENDSPIN
           155 : 6FFF;  -- 	ADDI 	-1
           156 : 4166;  -- 	JZERO 	ENDSPIN
           157 : 6FFF;  -- 	ADDI 	-1
           158 : 4166;  -- 	JZERO 	ENDSPIN
           159 : 90C2;  -- 	IN 		THETA
           15A : 4166;  -- 	JZERO 	ENDSPIN
           15B : 6FFF;  -- 	ADDI 	-1
           15C : 4166;  -- 	JZERO 	ENDSPIN
           15D : 6FFF;  -- 	ADDI 	-1
           15E : 4166;  -- 	JZERO 	ENDSPIN
           15F : 6FFF;  -- 	ADDI 	-1
           160 : 4166;  -- 	JZERO 	ENDSPIN
           161 : 6FFF;  -- 	ADDI 	-1
           162 : 4166;  -- 	JZERO 	ENDSPIN
           163 : 6FFF;  -- 	ADDI 	-1
           164 : 4166;  -- 	JZERO 	ENDSPIN
           165 : 2948;  -- 	JUMP FACING270
           166 : 0B9F;  -- 	LOAD 	ZERO
           167 : 9883;  -- 	OUT 	LVELCMD
           168 : 988B;  -- 	OUT 	RVELCMD
           169 : 80C1;  -- 	CALL 	Wait2Sec
           16A : 8800;  -- 	RETURN
           16B : 736F;  -- 	ILOAD PointerX
           16C : 1374;  -- 	STORE CurX
           16D : 816F;  -- 	CALL IncrementPtrX
           16E : 8800;  -- 	Return
           16F : 0B6F;  -- 	LOAD PointerX
           170 : 6803;  -- 	ADDI 3
           171 : 136F;  -- 	STORE PointerX
           172 : 0B79;  -- 	LOAD EndCount
           173 : 6801;  -- 	ADDI 1
           174 : 1379;  -- 	STORE EndCount
           175 : 8800;  -- 	Return
           176 : 7370;  -- 	ILOAD PointerY
           177 : 1375;  -- 	STORE CurY
           178 : 817A;  -- 	CALL IncrementPtrY
           179 : 8800;  -- 	Return
           17A : 0B70;  -- 	LOAD PointerY
           17B : 6803;  -- 	ADDI 3
           17C : 1370;  -- 	STORE PointerY
           17D : 0B79;  -- 	LOAD EndCount
           17E : 6801;  -- 	ADDI 1
           17F : 1379;  -- 	STORE EndCount
           180 : 8800;  -- 	Return
           181 : 7371;  -- 	ILOAD 	PointerOrd
           182 : 8249;  -- 	CALL 	IndicateDest
           183 : 8185;  -- 	CALL 	IncrementPtrOrder
           184 : 8800;  -- 	Return
           185 : 0B71;  -- 	LOAD PointerOrd
           186 : 6803;  -- 	ADDI 3
           187 : 1371;  -- 	STORE PointerOrd
           188 : 8800;  -- 	Return
           189 : 0037;  -- DW 55
           18A : 0048;  -- DW 72
           18B : 0000;  -- DW 0
           18C : 0000;  -- Ptr1: DW 0
           18D : B989;  -- 	LOADI  Table1
           18E : 118C;  -- 	STORE  Ptr1 ; pointer to the table
           18F : 718C;  -- 	ILOAD  Ptr1  ; get table value
           190 : 1395;  -- 	STORE  Temp  ; keep first table value for later
           191 : 098C;  -- 	LOAD   Ptr1
           192 : 6801;  -- 	ADDI   1     ; increment the pointer
           193 : 118C;  -- 	STORE  Ptr1  ; don't forget to store the new pointer value
           194 : 718C;  -- 	ILOAD  Ptr1  ; get the second table value
           195 : 1B95;  -- 	ADD    Temp  ; add the first table value
           196 : 1395;  -- 	STORE  Temp  ; save sum for later
           197 : 098C;  -- 	LOAD   Ptr1
           198 : 6801;  -- 	ADDI   1     ; increment the pointer (now at third value)
           199 : 118C;  -- 	STORE  Ptr1
           19A : 0B95;  -- 	LOAD   Temp  ; get the sum back in AC
           19B : 798C;  -- 	ISTORE Ptr1  ; put the sum in memory at the third table entry
           19C : B989;  -- 	LOADI  Table1 ; get the table address fresh
           19D : 6802;  -- 	ADDI   2     ; increment address to result entry
           19E : 1395;  -- 	STORE  Temp  ; different variable to show that 'Ptr1' is nothing special
           19F : B800;  -- 	LOADI  0     ; clear the AC just to prove we're getting the table value
           1A0 : 7395;  -- 	ILOAD  Temp  ; get the table value (3rd entry)
           1A1 : 9806;  -- 	OUT    LCD   ; and display it for debugging purposes
           1A2 : BBEB;  -- 	LOADI  1003     ; LOADI can load numbers up to 1023
           1A3 : 12F3;  -- 	STORE  m16sA    ; this is one input to the mult subroutine
           1A4 : BC05;  -- 	LOADI  -1019
           1A5 : 12F4;  -- 	STORE  m16sB    ; this is the other number to multiply
           1A6 : 82D0;  -- 	CALL   Mult16s  ; call this to perform the multiplication
           1A7 : 0AF8;  -- 	LOAD   mres16sH ; high word of the 32-bit result
           1A8 : 9804;  -- 	OUT    SSEG1
           1A9 : 0AF7;  -- 	LOAD   mres16sL ; low word of the 32-bit result
           1AA : 9805;  -- 	OUT    SSEG2
           1AB : BBEB;  -- 	LOADI  1003
           1AC : 6003;  -- 	SHIFT  3
           1AD : 694E;  -- 	ADDI   334      ; 1003*8+334 = 8358
           1AE : 132B;  -- 	STORE  d16sN    ; this is the numerator to the div subroutine
           1AF : BFE3;  -- 	LOADI  -29
           1B0 : 132C;  -- 	STORE  d16sD    ; this is the denominator
           1B1 : 82F9;  -- 	CALL   Div16s   ; call this to perform the division
           1B2 : 0B31;  -- 	LOAD   dres16sQ ; quotient of division
           1B3 : 9801;  -- 	OUT    LEDs
           1B4 : 0B32;  -- 	LOAD   dres16sR ; remainder of division
           1B5 : 9807;  -- 	OUT    XLEDs
           1B6 : B81E;  -- 	LOADI  30       ; wait 3 seconds
           1B7 : 81E9;  -- 	CALL   WaitAC
           1B8 : B800;  -- 	LOADI  0
           1B9 : 11D9;  -- 	STORE  Tripped  ; used to indicate conditions in following code
           1BA : 9807;  -- 	OUT    XLEDS
           1BB : 9801;  -- 	OUT    LEDS
           1BC : 9806;  -- 	OUT    LCD
           1BD : 9804;  -- 	OUT    SSEG1
           1BE : 9805;  -- 	OUT    SSEG2
           1BF : 825D;  -- 	CALL   StartLog    ; enable the interrupt-based position logging
           1C0 : 90C0;  -- 	IN     XPOS
           1C1 : 12CA;  -- 	STORE  AtanX      ; input to atan subroutine
           1C2 : 136A;  -- 	STORE  L2X        ; input to distance estimation subroutine
           1C3 : 90C1;  -- 	IN     YPOS
           1C4 : 12CB;  -- 	STORE  AtanY      ; input to atan subroutine
           1C5 : 136B;  -- 	STORE  L2Y        ; input to distance estimation subroutine
           1C6 : 8269;  -- 	CALL   Atan2      ; find the angle
           1C7 : 9804;  -- 	OUT    SSEG1
           1C8 : 8340;  -- 	CALL   L2Estimate ; estimate the distance
           1C9 : 9805;  -- 	OUT    SSEG2
           1CA : 23B8;  -- 	SUB    TwoFeet
           1CB : 39CD;  -- 	JPOS   Over2Ft    ; if over 2ft, trip the indicator
           1CC : 29C0;  -- 	JUMP   E3Loop     ; repeat forever
           1CD : 09D9;  -- 	LOAD   Tripped
           1CE : 39C0;  -- 	JPOS   E3Loop     ; if already indicated, don't do it again
           1CF : 09DA;  -- 	LOAD   TripCount  ; this example passes an incrementing count
           1D0 : 8249;  -- 	CALL   IndicateDest
           1D1 : B801;  -- 	LOADI  1
           1D2 : 11D9;  -- 	STORE  Tripped    ; remember that already indicated this round
           1D3 : 09DA;  -- 	LOAD   TripCount
           1D4 : 6801;  -- 	ADDI   1
           1D5 : 11DA;  -- 	STORE  TripCount  ; increment the counter
           1D6 : 0B9E;  -- 	LOAD   NegOne
           1D7 : 9801;  -- 	OUT    LEDS       ; display for debug
           1D8 : 29C0;  -- 	JUMP   E3Loop     ; repeat forever
           1D9 : 0000;  -- Tripped: DW 0
           1DA : 0000;  -- TripCount: DW 0
           1DB : 0B9F;  -- 	LOAD   Zero        ; Stop everything.
           1DC : 9883;  -- 	OUT    LVELCMD
           1DD : 988B;  -- 	OUT    RVELCMD
           1DE : 98B2;  -- 	OUT    SONAREN
           1DF : 09E3;  -- 	LOAD   DEAD        ; An indication that we are dead
           1E0 : 9805;  -- 	OUT    SSEG2
           1E1 : 8265;  -- 	CALL   StopLog     ; Disable position logging
           1E2 : 29E2;  -- 	JUMP   Forever     ; Do this forever.
           1E3 : DEAD;  -- DEAD:      DW &HDEAD   ; Example of a "local variable"
           1E4 : 9802;  -- 	OUT    TIMER
           1E5 : 9002;  -- 	IN     TIMER
           1E6 : 6FF6;  -- 	ADDI   -10         ; 1 second in 10Hz.
           1E7 : 31E5;  -- 	JNEG   Wloop
           1E8 : 8800;  -- 	RETURN
           1E9 : 11EF;  -- 	STORE  WaitTime
           1EA : 9802;  -- 	OUT    Timer
           1EB : 9002;  -- 	IN     Timer
           1EC : 21EF;  -- 	SUB    WaitTime
           1ED : 31EB;  -- 	JNEG   WACLoop
           1EE : 8800;  -- 	RETURN
           1EF : 0000;  -- 	WaitTime: DW 0     ; "local" variable.
           1F0 : 8208;  -- 	CALL   GetBattLvl
           1F1 : 41F0;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1F2 : 23C3;  -- 	SUB    MinBatt
           1F3 : 31F6;  -- 	JNEG   DeadBatt
           1F4 : 1BC3;  -- 	ADD    MinBatt     ; get original value back
           1F5 : 8800;  -- 	RETURN
           1F6 : 0BA3;  -- 	LOAD   Four
           1F7 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1F8 : 8208;  -- 	CALL   GetBattLvl  ; get the battery level
           1F9 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1FA : 9805;  -- 	OUT    SSEG2
           1FB : 9806;  -- 	OUT    LCD
           1FC : 0B9F;  -- 	LOAD   Zero
           1FD : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1FE : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1FF : 9807;  -- 	OUT    XLEDS
           200 : 81E4;  -- 	CALL   Wait1       ; 1 second
           201 : 0B9F;  -- 	Load   Zero
           202 : 980A;  -- 	OUT    BEEP        ; stop beeping
           203 : 0B9F;  -- 	LOAD   Zero
           204 : 9801;  -- 	OUT    LEDS        ; LEDs off
           205 : 9807;  -- 	OUT    XLEDS
           206 : 81E4;  -- 	CALL   Wait1       ; 1 second
           207 : 29F6;  -- 	JUMP   DeadBatt    ; repeat forever
           208 : 0BC5;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           209 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           20A : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           20B : 8216;  -- 	CALL   BlockI2C    ; wait for it to finish
           20C : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           20D : 8800;  -- 	RETURN
           20E : 8216;  -- 	CALL   BlockI2C    ; wait for idle
           20F : 0BC4;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           210 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           211 : 0B9F;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           212 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           213 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           214 : 8216;  -- 	CALL   BlockI2C    ; wait for it to finish
           215 : 8800;  -- 	RETURN
           216 : 0B9F;  -- 	LOAD   Zero
           217 : 1395;  -- 	STORE  Temp        ; Used to check for timeout
           218 : 0B95;  -- 	LOAD   Temp
           219 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           21A : 1395;  -- 	STORE  Temp
           21B : 421F;  -- 	JZERO  I2CError    ; Timeout occurred; error
           21C : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           21D : 3A18;  -- 	JPOS   BI2CL       ; If not 0, try again
           21E : 8800;  -- 	RETURN             ; Else return
           21F : 0B9F;  -- 	LOAD   Zero
           220 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           221 : 9804;  -- 	OUT    SSEG1
           222 : 9805;  -- 	OUT    SSEG2       ; display error message
           223 : 2A1F;  -- 	JUMP   I2CError
           224 : 1239;  -- 	STORE  UARTTemp
           225 : 6018;  -- 	SHIFT  -8
           226 : 6FE5;  -- 	ADDI   -27   ; escape character
           227 : 422B;  -- 	JZERO  UEsc1
           228 : 681B;  -- 	ADDI   27
           229 : 9898;  -- 	OUT    UART_DAT
           22A : 2A2E;  -- 	JUMP   USend2
           22B : 681B;  -- 	ADDI   27
           22C : 9898;  -- 	OUT    UART_DAT
           22D : 9898;  -- 	OUT    UART_DAT
           22E : 0A39;  -- 	LOAD   UARTTemp
           22F : 4BB2;  -- 	AND    LowByte
           230 : 6FE5;  -- 	ADDI   -27   ; escape character
           231 : 4235;  -- 	JZERO  UEsc2
           232 : 681B;  -- 	ADDI   27
           233 : 9898;  -- 	OUT    UART_DAT
           234 : 8800;  -- 	RETURN
           235 : 681B;  -- 	ADDI   27
           236 : 9898;  -- 	OUT    UART_DAT
           237 : 9898;  -- 	OUT    UART_DAT
           238 : 8800;  -- 	RETURN
           239 : 0000;  -- 	UARTTemp: DW 0
           23A : 0A3F;  -- 	LOAD   NL
           23B : 9898;  -- 	OUT    UART_DAT
           23C : 6018;  -- 	SHIFT  -8
           23D : 9898;  -- 	OUT    UART_DAT
           23E : 8800;  -- 	RETURN
           23F : 0A1B;  -- 	NL: DW &H0A1B
           240 : 0A45;  -- 	LOAD   NBSP
           241 : 9898;  -- 	OUT    UART_DAT
           242 : 6018;  -- 	SHIFT  -8
           243 : 9898;  -- 	OUT    UART_DAT
           244 : 8800;  -- 	RETURN
           245 : 201B;  -- 	NBSP: DW &H201B
           246 : 9098;  -- 	IN     UART_DAT
           247 : 3246;  -- 	JNEG   UARTClear
           248 : 8800;  -- 	RETURN
           249 : 4BB3;  -- 	AND    LowNibl    ; keep only #s 0-15
           24A : 124E;  -- 	STORE  IDNumber
           24B : B801;  -- 	LOADI  1
           24C : 124F;  -- 	STORE  IDFlag     ; set flag for indication
           24D : 8800;  -- 	RETURN
           24E : 0000;  -- 	IDNumber: DW 0
           24F : 0000;  -- 	IDFlag: DW 0
           250 : 823A;  -- 	CALL   UARTNL ; newline
           251 : 90C0;  -- 	IN     XPOS
           252 : 8224;  -- 	CALL   UARTSend2
           253 : 90C1;  -- 	IN     YPOS
           254 : 8224;  -- 	CALL   UARTSend2
           255 : 0A4F;  -- 	LOAD   IDFlag ; check if user has request a destination indication
           256 : 3A58;  -- 	JPOS   CTIndicateDest ; if yes, do it; otherwise...
           257 : B000;  -- 	RETI   ; return from interrupt
           258 : 0A4E;  -- 	LOAD   IDNumber
           259 : 822F;  -- 	CALL   UARTSend1 ; send the indicated destination
           25A : B800;  -- 	LOADI  0
           25B : 124F;  -- 	STORE  IDFlag
           25C : B000;  -- 	RETI
           25D : 823A;  -- 	CALL   UARTNL      ; send a newline to separate data
           25E : B800;  -- 	LOADI  0
           25F : 124F;  -- 	STORE  IDFlag      ; clear any pending flag
           260 : B832;  -- 	LOADI  50
           261 : 980C;  -- 	OUT    CTIMER      ; configure timer for 0.01*50=0.5s interrupts
           262 : A002;  -- 	CLI    &B0010      ; clear any pending interrupt from timer
           263 : A802;  -- 	SEI    &B0010      ; enable interrupt from timer (source 1)
           264 : 8800;  -- 	RETURN
           265 : A002;  -- 	CLI    &B0010      ; disable interrupt source 1 (timer)
           266 : B800;  -- 	LOADI  0
           267 : 980C;  -- 	OUT    CTIMER      ; reset configurable timer
           268 : 8800;  -- 	RETURN
           269 : 0ACB;  -- 	LOAD   AtanY
           26A : 8333;  -- 	CALL   Abs          ; abs(y)
           26B : 12CD;  -- 	STORE  AtanT
           26C : 0ACA;  -- 	LOAD   AtanX        ; abs(x)
           26D : 8333;  -- 	CALL   Abs
           26E : 22CD;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           26F : 327A;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           270 : 0ACA;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           271 : 3277;  -- 	JNEG   A2_R3
           272 : 828B;  -- 	CALL   A2_calc      ; Octants 1, 8
           273 : 3275;  -- 	JNEG   A2_R1n
           274 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           275 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           276 : 8800;  -- 	RETURN
           277 : 828B;  -- 	CALL   A2_calc      ; Octants 4, 5
           278 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           279 : 8800;  -- 	RETURN
           27A : 0ACB;  -- 	LOAD   AtanY        ; Swap input arguments
           27B : 12CD;  -- 	STORE  AtanT
           27C : 0ACA;  -- 	LOAD   AtanX
           27D : 12CB;  -- 	STORE  AtanY
           27E : 0ACD;  -- 	LOAD   AtanT
           27F : 12CA;  -- 	STORE  AtanX
           280 : 3A86;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           281 : 828B;  -- 	CALL   A2_calc      ; else octants 6, 7
           282 : 5B9E;  -- 	XOR    NegOne
           283 : 6801;  -- 	ADDI   1            ; negate the angle
           284 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           285 : 8800;  -- 	RETURN
           286 : 828B;  -- 	CALL   A2_calc      ; Octants 2, 3
           287 : 5B9E;  -- 	XOR    NegOne
           288 : 6801;  -- 	ADDI   1            ; negate the angle
           289 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           28A : 8800;  -- 	RETURN
           28B : 0ACB;  -- 	LOAD   AtanY
           28C : 132B;  -- 	STORE  d16sN        ; Y in numerator
           28D : 0ACA;  -- 	LOAD   AtanX
           28E : 132C;  -- 	STORE  d16sD        ; X in denominator
           28F : 82B7;  -- 	CALL   A2_div       ; divide
           290 : 0B31;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           291 : 12CC;  -- 	STORE  AtanRatio
           292 : 12F3;  -- 	STORE  m16sA
           293 : 12F4;  -- 	STORE  m16sB
           294 : 82AE;  -- 	CALL   A2_mult      ; X^2
           295 : 12F3;  -- 	STORE  m16sA
           296 : 0ACE;  -- 	LOAD   A2c
           297 : 12F4;  -- 	STORE  m16sB
           298 : 82AE;  -- 	CALL   A2_mult
           299 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           29A : 132C;  -- 	STORE  d16sD
           29B : 0ACC;  -- 	LOAD   AtanRatio
           29C : 132B;  -- 	STORE  d16sN        ; Ratio in numerator
           29D : 82B7;  -- 	CALL   A2_div       ; divide
           29E : 0B31;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           29F : 12F3;  -- 	STORE  m16sA        ; <= result in radians
           2A0 : 0ACF;  -- 	LOAD   A2cd         ; degree conversion factor
           2A1 : 12F4;  -- 	STORE  m16sB
           2A2 : 82AE;  -- 	CALL   A2_mult      ; convert to degrees
           2A3 : 12CD;  -- 	STORE  AtanT
           2A4 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           2A5 : 4BA0;  -- 	AND    One
           2A6 : 42AB;  -- 	JZERO  A2_rdwn      ; round down
           2A7 : 0ACD;  -- 	LOAD   AtanT
           2A8 : 6018;  -- 	SHIFT  -8
           2A9 : 6801;  -- 	ADDI   1            ; round up
           2AA : 8800;  -- 	RETURN
           2AB : 0ACD;  -- 	LOAD   AtanT
           2AC : 6018;  -- 	SHIFT  -8           ; round down
           2AD : 8800;  -- 	RETURN
           2AE : 82D0;  -- 	CALL   Mult16s
           2AF : 0AF8;  -- 	LOAD   mres16sH
           2B0 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           2B1 : 12F8;  -- 	STORE  mres16sH
           2B2 : 0AF7;  -- 	LOAD   mres16sL
           2B3 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           2B4 : 4BB2;  -- 	AND    LowByte
           2B5 : 52F8;  -- 	OR     mres16sH     ; combine high and low words of result
           2B6 : 8800;  -- 	RETURN
           2B7 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           2B8 : 12CD;  -- 	STORE  AtanT
           2B9 : 0ACD;  -- 	LOAD   AtanT
           2BA : 6FFF;  -- 	ADDI   -1
           2BB : 3ABE;  -- 	JPOS   A2_DN        ; not done; continue shifting
           2BC : 82F9;  -- 	CALL   Div16s       ; do the standard division
           2BD : 8800;  -- 	RETURN
           2BE : 12CD;  -- 	STORE  AtanT
           2BF : 0B2B;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           2C0 : 6001;  -- 	SHIFT  1
           2C1 : 5B2B;  -- 	XOR    d16sN        ; if the sign changed,
           2C2 : 32C6;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           2C3 : 5B2B;  -- 	XOR    d16sN        ; get back shifted version
           2C4 : 132B;  -- 	STORE  d16sN
           2C5 : 2AB9;  -- 	JUMP   A2_DL
           2C6 : 0B2C;  -- 	LOAD   d16sD
           2C7 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           2C8 : 132C;  -- 	STORE  d16sD
           2C9 : 2AB9;  -- 	JUMP   A2_DL
           2CA : 0000;  -- AtanX:      DW 0
           2CB : 0000;  -- AtanY:      DW 0
           2CC : 0000;  -- AtanRatio:  DW 0        ; =y/x
           2CD : 0000;  -- AtanT:      DW 0        ; temporary value
           2CE : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           2CF : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           2D0 : B800;  -- 	LOADI  0
           2D1 : 12F5;  -- 	STORE  m16sc        ; clear carry
           2D2 : 12F8;  -- 	STORE  mres16sH     ; clear result
           2D3 : B810;  -- 	LOADI  16           ; load 16 to counter
           2D4 : 12F6;  -- 	STORE  mcnt16s
           2D5 : 0AF5;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           2D6 : 42DA;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           2D7 : 0AF8;  -- 	LOAD   mres16sH     ; if a carry,
           2D8 : 1AF3;  -- 	ADD    m16sA        ;  add multiplicand to result H
           2D9 : 12F8;  -- 	STORE  mres16sH
           2DA : 0AF4;  -- 	LOAD   m16sB
           2DB : 4BA0;  -- 	AND    One          ; check bit 0 of multiplier
           2DC : 12F5;  -- 	STORE  m16sc        ; save as next carry
           2DD : 42E1;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           2DE : 0AF8;  -- 	LOAD   mres16sH     ; if bit 0 set,
           2DF : 22F3;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           2E0 : 12F8;  -- 	STORE  mres16sH
           2E1 : 0AF4;  -- 	LOAD   m16sB
           2E2 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           2E3 : 4AF2;  -- 	AND    c7FFF        ; clear msb
           2E4 : 12F4;  -- 	STORE  m16sB
           2E5 : 0AF8;  -- 	LOAD   mres16sH     ; load result H
           2E6 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           2E7 : 52F4;  -- 	OR     m16sB
           2E8 : 12F4;  -- 	STORE  m16sB        ; result L now includes carry out from H
           2E9 : 0AF8;  -- 	LOAD   mres16sH
           2EA : 6011;  -- 	SHIFT  -1
           2EB : 12F8;  -- 	STORE  mres16sH     ; shift result H >>1
           2EC : 0AF6;  -- 	LOAD   mcnt16s
           2ED : 6FFF;  -- 	ADDI   -1           ; check counter
           2EE : 3AD4;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           2EF : 0AF4;  -- 	LOAD   m16sB
           2F0 : 12F7;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           2F1 : 8800;  -- 	RETURN              ; Done
           2F2 : 7FFF;  -- c7FFF: DW &H7FFF
           2F3 : 0000;  -- m16sA: DW 0 ; multiplicand
           2F4 : 0000;  -- m16sB: DW 0 ; multipler
           2F5 : 0000;  -- m16sc: DW 0 ; carry
           2F6 : 0000;  -- mcnt16s: DW 0 ; counter
           2F7 : 0000;  -- mres16sL: DW 0 ; result low
           2F8 : 0000;  -- mres16sH: DW 0 ; result high
           2F9 : B800;  -- 	LOADI  0
           2FA : 1332;  -- 	STORE  dres16sR     ; clear remainder result
           2FB : 132F;  -- 	STORE  d16sC1       ; clear carry
           2FC : 0B2B;  -- 	LOAD   d16sN
           2FD : 5B2C;  -- 	XOR    d16sD
           2FE : 132D;  -- 	STORE  d16sS        ; sign determination = N XOR D
           2FF : B811;  -- 	LOADI  17
           300 : 132E;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           301 : 0B2C;  -- 	LOAD   d16sD
           302 : 8333;  -- 	CALL   Abs          ; take absolute value of denominator
           303 : 132C;  -- 	STORE  d16sD
           304 : 0B2B;  -- 	LOAD   d16sN
           305 : 8333;  -- 	CALL   Abs          ; take absolute value of numerator
           306 : 132B;  -- 	STORE  d16sN
           307 : 0B2B;  -- 	LOAD   d16sN
           308 : 601F;  -- 	SHIFT  -15          ; get msb
           309 : 4BA0;  -- 	AND    One          ; only msb (because shift is arithmetic)
           30A : 1330;  -- 	STORE  d16sC2       ; store as carry
           30B : 0B2B;  -- 	LOAD   d16sN
           30C : 6001;  -- 	SHIFT  1            ; shift <<1
           30D : 532F;  -- 	OR     d16sC1       ; with carry
           30E : 132B;  -- 	STORE  d16sN
           30F : 0B2E;  -- 	LOAD   d16sT
           310 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           311 : 4321;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           312 : 132E;  -- 	STORE  d16sT
           313 : 0B32;  -- 	LOAD   dres16sR
           314 : 6001;  -- 	SHIFT  1            ; shift remainder
           315 : 5330;  -- 	OR     d16sC2       ; with carry from other shift
           316 : 232C;  -- 	SUB    d16sD        ; subtract denominator from remainder
           317 : 331C;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           318 : 1332;  -- 	STORE  dres16sR
           319 : B801;  -- 	LOADI  1
           31A : 132F;  -- 	STORE  d16sC1       ; set carry
           31B : 2B07;  -- 	JUMP   Div16s_loop
           31C : 1B2C;  -- 	ADD    d16sD        ; add denominator back in
           31D : 1332;  -- 	STORE  dres16sR
           31E : B800;  -- 	LOADI  0
           31F : 132F;  -- 	STORE  d16sC1       ; clear carry
           320 : 2B07;  -- 	JUMP   Div16s_loop
           321 : 0B2B;  -- 	LOAD   d16sN
           322 : 1331;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           323 : 0B2D;  -- 	LOAD   d16sS        ; check the sign indicator
           324 : 3326;  -- 	JNEG   Div16s_neg
           325 : 8800;  -- 	RETURN
           326 : 0B31;  -- 	LOAD   dres16sQ     ; need to negate the result
           327 : 5B9E;  -- 	XOR    NegOne
           328 : 6801;  -- 	ADDI   1
           329 : 1331;  -- 	STORE  dres16sQ
           32A : 8800;  -- 	RETURN
           32B : 0000;  -- d16sN: DW 0 ; numerator
           32C : 0000;  -- d16sD: DW 0 ; denominator
           32D : 0000;  -- d16sS: DW 0 ; sign value
           32E : 0000;  -- d16sT: DW 0 ; temp counter
           32F : 0000;  -- d16sC1: DW 0 ; carry value
           330 : 0000;  -- d16sC2: DW 0 ; carry value
           331 : 0000;  -- dres16sQ: DW 0 ; quotient result
           332 : 0000;  -- dres16sR: DW 0 ; remainder result
           333 : 3B36;  -- 	JPOS   Abs_r
           334 : 5B9E;  -- 	XOR    NegOne       ; Flip all bits
           335 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           336 : 8800;  -- 	RETURN
           337 : 333C;  -- 	JNEG   Mod180n      ; handle negatives
           338 : 6F4C;  -- 	ADDI   -180
           339 : 3B38;  -- 	JPOS   Mod180p      ; subtract 180 until negative
           33A : 68B4;  -- 	ADDI   180          ; go back positive
           33B : 8800;  -- 	RETURN
           33C : 68B4;  -- 	ADDI   180          ; add 180 until positive
           33D : 333C;  -- 	JNEG   Mod180n
           33E : 6F4C;  -- 	ADDI   -180         ; go back negative
           33F : 8800;  -- 	RETURN
           340 : 0B6A;  -- 	LOAD   L2X
           341 : 8333;  -- 	CALL   Abs
           342 : 136C;  -- 	STORE  L2T1
           343 : 0B6B;  -- 	LOAD   L2Y
           344 : 8333;  -- 	CALL   Abs
           345 : 236C;  -- 	SUB    L2T1
           346 : 3362;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           347 : 1B6C;  -- 	ADD    L2T1
           348 : 12F3;  -- 	STORE  m16sa
           349 : B8F6;  -- 	LOADI  246       ; max * 246
           34A : 12F4;  -- 	STORE  m16sB
           34B : 82D0;  -- 	CALL   Mult16s
           34C : 0AF8;  -- 	LOAD   mres16sH
           34D : 6008;  -- 	SHIFT  8
           34E : 136D;  -- 	STORE  L2T2
           34F : 0AF7;  -- 	LOAD   mres16sL
           350 : 6018;  -- 	SHIFT  -8        ; / 256
           351 : 4BB2;  -- 	AND    LowByte
           352 : 536D;  -- 	OR     L2T2
           353 : 136E;  -- 	STORE  L2T3
           354 : 0B6C;  -- 	LOAD   L2T1
           355 : 12F3;  -- 	STORE  m16sa
           356 : B868;  -- 	LOADI  104       ; min * 104
           357 : 12F4;  -- 	STORE  m16sB
           358 : 82D0;  -- 	CALL   Mult16s
           359 : 0AF8;  -- 	LOAD   mres16sH
           35A : 6008;  -- 	SHIFT  8
           35B : 136D;  -- 	STORE  L2T2
           35C : 0AF7;  -- 	LOAD   mres16sL
           35D : 6018;  -- 	SHIFT  -8        ; / 256
           35E : 4BB2;  -- 	AND    LowByte
           35F : 536D;  -- 	OR     L2T2
           360 : 1B6E;  -- 	ADD    L2T3     ; sum
           361 : 8800;  -- 	RETURN
           362 : 1B6C;  -- 	ADD    L2T1
           363 : 136D;  -- 	STORE  L2T2
           364 : 0B6C;  -- 	LOAD   L2T1
           365 : 136E;  -- 	STORE  L2T3
           366 : 0B6D;  -- 	LOAD   L2T2
           367 : 136C;  -- 	STORE  L2T1
           368 : 0B6E;  -- 	LOAD   L2T3
           369 : 2B48;  -- 	JUMP   CalcDist
           36A : 0000;  -- L2X:  DW 0
           36B : 0000;  -- L2Y:  DW 0
           36C : 0000;  -- L2T1: DW 0
           36D : 0000;  -- L2T2: DW 0
           36E : 0000;  -- L2T3: DW 0
           36F : 0000;  -- PointerX:	DW 0
           370 : 0000;  -- PointerY: 	DW 0
           371 : 0000;  -- PointerOrd:	DW 0
           372 : 0000;  -- PrevX:		DW 0
           373 : 0000;  -- PrevY:		DW 0
           374 : 0000;  -- CurX:		DW 0
           375 : 0000;  -- CurY:		DW 0
           376 : 0000;  -- MyDist:		DW 0
           377 : 0000;  -- PrevDist:	DW 0
           378 : 0000;  -- PrevAngle:	DW 0
           379 : 0000;  -- EndCount:	DW 0
           37A : 0001;  -- LightUpLED: DW 1
           37B : 0000;  -- TurnOffLED: DW 0
           37C : 0002;  -- LightUpLED2: 	DW 2
           37D : 0122;  -- X0:      DW 290
           37E : 0122;  -- Y0:      DW 290
           37F : 0244;  -- X1:      DW 580
           380 : 0244;  -- Y1:      DW 580
           381 : 0366;  -- X2:      DW 870
           382 : 0366;  -- Y2:      DW 870
           383 : 0366;  -- X3:      DW 870
           384 : 0366;  -- Y3:      DW 870
           385 : 0244;  -- X4:      DW 580
           386 : 0244;  -- Y4:      DW 580
           387 : 0122;  -- X5:      DW 290
           388 : 0122;  -- Y5:      DW 290
           389 : FEDE;  -- X6:      DW -290
           38A : 0122;  -- Y6:      DW 290
           38B : FDBC;  -- X7:      DW -580
           38C : 0244;  -- Y7:      DW 580
           38D : FC9A;  -- X8:      DW -870
           38E : 0366;  -- Y8:      DW 870
           38F : FEDE;  -- X9:      DW -290
           390 : FEDE;  -- Y9:      DW -290
           391 : FDBC;  -- X10:      DW -580
           392 : FDBC;  -- Y10:      DW -580
           393 : FC9A;  -- X11:      DW -870
           394 : FC9A;  -- Y11:      DW -870
           395 : 0000;  -- Temp:  DW 0 ; "Temp" is not a great name, but can be useful
           396 : 0000;  -- Temp2: DW 0
           397 : 0000;  -- Temp3: DW 0
           398 : 0000;  -- CDX: DW 0      ; current desired X
           399 : 0000;  -- CDY: DW 0      ; current desired Y
           39A : 0000;  -- CDT: DW 0      ; current desired angle
           39B : 0000;  -- CX:  DW 0      ; sampled X
           39C : 0000;  -- CY:  DW 0      ; sampled Y
           39D : 0000;  -- CT:  DW 0      ; sampled theta
           39E : FFFF;  -- NegOne:   DW -1
           39F : 0000;  -- Zero:     DW 0
           3A0 : 0001;  -- One:      DW 1
           3A1 : 0002;  -- Two:      DW 2
           3A2 : 0003;  -- Three:    DW 3
           3A3 : 0004;  -- Four:     DW 4
           3A4 : 0005;  -- Five:     DW 5
           3A5 : 0006;  -- Six:      DW 6
           3A6 : 0007;  -- Seven:    DW 7
           3A7 : 0008;  -- Eight:    DW 8
           3A8 : 0009;  -- Nine:     DW 9
           3A9 : 000A;  -- Ten:      DW 10
           3AA : 0001;  -- Mask0:    DW &B00000001
           3AB : 0002;  -- Mask1:    DW &B00000010
           3AC : 0004;  -- Mask2:    DW &B00000100
           3AD : 0008;  -- Mask3:    DW &B00001000
           3AE : 0010;  -- Mask4:    DW &B00010000
           3AF : 0020;  -- Mask5:    DW &B00100000
           3B0 : 0040;  -- Mask6:    DW &B01000000
           3B1 : 0080;  -- Mask7:    DW &B10000000
           3B2 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           3B3 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           3B4 : 03B8;  -- OneMeter: DW 952       ; ~1m in 1.05mm units
           3B5 : 01DC;  -- HalfMeter: DW 476      ; ~0.5m in 1.05mm units
           3B6 : 0091;  -- HalfFoot:	DW 145
           3B7 : 0122;  -- OneFoot:  DW 290       ; ~1ft in 1.05mm robot units
           3B8 : 0245;  -- TwoFeet:  DW 581       ; ~2ft in 1.05mm units
           3B9 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           3BA : 00B4;  -- Deg180:   DW 180       ; 180
           3BB : 010E;  -- Deg270:   DW 270       ; 270
           3BC : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           3BD : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           3BE : FF9C;  -- RSlow:    DW -100
           3BF : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           3C0 : FEA2;  -- RMid:     DW -350
           3C1 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           3C2 : FE0C;  -- RFast:    DW -500
           3C3 : 0082;  -- MinBatt:  DW 130       ; 13.0V - minimum safe battery voltage
           3C4 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           3C5 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
